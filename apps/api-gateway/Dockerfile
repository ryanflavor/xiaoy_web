# Multi-stage Docker build for API Gateway

# Stage 1: Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Copy source code
COPY src/ ./src/

# Install dependencies (including dev dependencies for build)
RUN npm ci

# Build the application
RUN npm run build

# Stage 2: Production stage
FROM node:18-alpine AS production

# Install Python for ZMQ integration (required for python-shell)
RUN apk add --no-cache python3 py3-pip

# Create app directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S apigateway -u 1001

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Copy environment example (can be overridden at runtime)
COPY .env.example ./

# Create necessary directories
RUN mkdir -p /app/python-scripts && \
    chown -R apigateway:nodejs /app

# Switch to non-root user
USER apigateway

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Start the application
CMD ["npm", "start"]